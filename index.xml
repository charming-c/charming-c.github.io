<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Charming Zone</title><link>https://charming-c.github.io/</link><description>Recent content on Charming Zone</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 21 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://charming-c.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://charming-c.github.io/about/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://charming-c.github.io/about/</guid><description>I am an undergraduate student of CCNU.
Focus on:
Android Develop Algorithms Interested in:
Films Reading</description></item><item><title>Java-JVM</title><link>https://charming-c.github.io/post/java-jvm/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://charming-c.github.io/post/java-jvm/</guid><description>一、什么是JVM？ 1. 从jdk说起 在初次运行Java代码之前我们都要下载一个叫做jdk的东西，并且要配置好环境变量，这样我们的java代码才能</description></item><item><title>Java内存模型与线程</title><link>https://charming-c.github.io/post/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://charming-c.github.io/post/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid><description>Java内存模型与线程 多任务处理在现代计算机操作系统中几乎已经是一项必备的技能了。在很多的场景下，让计算机同时去做几件事情，不仅仅是因为计算</description></item><item><title>JVM-垃圾回收机制</title><link>https://charming-c.github.io/post/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://charming-c.github.io/post/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid><description>JVM&amp;ndash;垃圾回收机制 ​ 在之前介绍的 Java 内存运行时区域的各个部分，其中程序计数器、虚拟机栈、本地方法栈 3 个区域随线程而生，随线程而灭</description></item><item><title>My First Post</title><link>https://charming-c.github.io/posts/my-first-post/</link><pubDate>Wed, 20 Apr 2022 19:23:58 +0800</pubDate><guid>https://charming-c.github.io/posts/my-first-post/</guid><description>&lt;h1 id="浅谈viewactivitywindow">浅谈view、activity、window&lt;/h1>
&lt;h2 id="1从-setcontentview出发">1、从 setContentView（）出发&lt;/h2>
&lt;p>对于activity的添加一个布局我们一般都会使用这个方法，我们尝试从源码的角度去解读这样的一方法的工作流程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Set the activity content from a layout resource. The resource will be
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * inflated, adding all top-level views to the activity.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param layoutResID Resource ID to be inflated.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @see #setContentView(android.view.View)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setContentView&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@LayoutRes&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">layoutResID&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">getWindow&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setContentView&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">layoutResID&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initWindowDecorActionBar&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里就可以看到，我们的布局文件其实并不是加载进activity中的，而是调用了当前 activity 所持有的一个 Window 对象，然后调用该对象 mWindow 的 setContenView() 方法，而这个 mWindow 是在 attach 方法里赋的初值 &lt;code>mWindow = new PhoneWindow(this, window, activityConfigCallback);&lt;/code> 他实际是一个 PhoneWindow 的 对象，对于 PhoneWindow的方法：&lt;/p></description></item><item><title>My First Post</title><link>https://charming-c.github.io/posts/my-first-post2/</link><pubDate>Wed, 20 Apr 2022 19:23:58 +0800</pubDate><guid>https://charming-c.github.io/posts/my-first-post2/</guid><description>&lt;h1 id="浅谈viewactivitywindow">浅谈view、activity、window&lt;/h1>
&lt;h2 id="1从-setcontentview出发">1、从 setContentView（）出发&lt;/h2>
&lt;p>对于activity的添加一个布局我们一般都会使用这个方法，我们尝试从源码的角度去解读这样的一方法的工作流程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Set the activity content from a layout resource. The resource will be
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * inflated, adding all top-level views to the activity.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param layoutResID Resource ID to be inflated.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @see #setContentView(android.view.View)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setContentView&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@LayoutRes&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">layoutResID&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">getWindow&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">setContentView&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">layoutResID&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initWindowDecorActionBar&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里就可以看到，我们的布局文件其实并不是加载进activity中的，而是调用了当前 activity 所持有的一个 Window 对象，然后调用该对象 mWindow 的 setContenView() 方法，而这个 mWindow 是在 attach 方法里赋的初值 &lt;code>mWindow = new PhoneWindow(this, window, activityConfigCallback);&lt;/code> 他实际是一个 PhoneWindow 的 对象，对于 PhoneWindow的方法：&lt;/p></description></item><item><title>Java-IO流</title><link>https://charming-c.github.io/post/java-io%E6%B5%81/</link><pubDate>Thu, 10 Sep 2020 16:46:27 +0000</pubDate><guid>https://charming-c.github.io/post/java-io%E6%B5%81/</guid><description>&lt;p>简单介绍java的io流的概念&lt;/p>
&lt;h1 id="一io概念">一、IO概念&lt;/h1>
&lt;ul>
&lt;li>I/O就是input和output的缩写，是计算机调度把各个储存中（包括内存和外部储存）的数据写入写出的过程&lt;/li>
&lt;li>所谓的外部设备可以包括硬盘文件, 网络设备, 另个程序等. 也就是当前程序之外的数据设备&lt;/li>
&lt;li>java中用流（stream）来抽象表示这么一个写入写出的功能，封装成一个类，都放在java.io这个包里面&lt;/li>
&lt;/ul></description></item></channel></rss>